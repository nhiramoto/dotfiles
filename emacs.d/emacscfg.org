#+TITLE: Emacs Configuration
#+AUTHOR: nhtoshiaki
#+OPTIONS: toc:nil num:nil

* UI preferences

** Frame Preferences

Disable menu bar, tool bar and scroll bar.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode nil)
  (menu-bar-mode nil)
  (when window-system
    (scroll-bar-mode nil))
#+END_SRC

Use the current project name as frame title.

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC

** Disable Visual Bell

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Mouse

Throw mouse pointer to outside of emacs when typing.

#+BEGIN_SRC emacs-lisp
  (mouse-avoidance-mode 'banish)
#+END_SRC

** Consistent line height

#+BEGIN_SRC emacs-lisp
  (unicode-fonts-setup)
#+END_SRC

** Hide certain modes from the modeline

#+BEGIN_SRC emacs-lisp
  (defmacro diminish-minor-mode (filename mode &optional abbrev)
    `(eval-after-load (symbol-name ,filename)
       '(diminish ,mode ,abbrev)))

  (defmacro diminish-major-mode (mode-hook abbrev)
    `(add-hook ,mode-hook
               (lambda () (setq mode-name ,abbrev))))

  (diminish-minor-mode 'abbrev 'abbrev-mode)
  (diminish-minor-mode 'simple 'auto-fill-function)
  (diminish-minor-mode 'company 'company-mode)
  (diminish-minor-mode 'eldoc 'eldoc-mode)
  (diminish-minor-mode 'flycheck 'flycheck-mode)
  (diminish-minor-mode 'flyspell 'flyspell-mode)
  (diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
  (diminish-minor-mode 'projectile 'projectile-mode)
  (diminish-minor-mode 'ruby-end 'ruby-end-mode)
  (diminish-minor-mode 'subword 'subword-mode)
  (diminish-minor-mode 'undo-tree 'undo-tree-mode)
  (diminish-minor-mode 'yard-mode 'yard-mode)
  (diminish-minor-mode 'yasnippet 'yas-minor-mode)
  (diminish-minor-mode 'wrap-region 'wrap-region-mode)

  (diminish-minor-mode 'paredit 'paredit-mode " π")

  (diminish-major-mode 'emacs-lisp-mode-hook "el")
  (diminish-major-mode 'haskell-mode-hook "λ=")
  (diminish-major-mode 'lisp-interaction-mode-hook "λ")
  (diminish-major-mode 'python-mode-hook "Py")
#+END_SRC

** Line numbers

#+BEGIN_SRC emacs-lisp
  (setq linum-relative-current-symbol "")
  (setq linum-relative-format "%3s ")
  (setq linum-relative-global-mode nil)
#+END_SRC

Use =linum-relative= in specifics modes.

#+BEGIN_SRC emacs-lisp
  (require 'linum-relative)
  (add-hook 'prog-mode-hook '(lambda () (linum-relative-mode t)))
  (add-hook 'LaTeX-mode-hook '(lambda () (linum-relative-mode t)))
  (add-hook 'text-mode-hook '(lambda () (linum-relative-mode t)))
#+END_SRC

** Ask for y/n instead of yes/no

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Window resizing

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+END_SRC

** Blinking cursor

#+BEGIN_SRC emacs-lisp
  (setq blink-cursor-mode nil)
#+END_SRC

** Column number mode

#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC

** Confirm when leaving Emacs

#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Cursor type

*** Default cursor

#+BEGIN_SRC emacs-lisp
  (setq cursor-type 'bar)
#+END_SRC

*** In non selected window

#+BEGIN_SRC emacs-lisp
  (setq cursor-in-non-selected-window 'hbar)
#+END_SRC


* Editing preferences

** Scroll conservatively

Only scroll as far as point goes.

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** Highlight the current line

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

** Highlight matched brackets

#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
** Tab width

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC
** Subword

Treat CamelCase symbols as separate words.

#+BEGIN_SRC emacs-lisp
  (global-subword-mode t)
#+END_SRC

* Specific modes preferences

** LaTeX mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook '(lambda () (visual-line-mode t)))
  (add-hook 'LaTeX-mode-hook '(lambda () (flyspell-mode t)))
  (add-hook 'LaTeX-mode-hook '(lambda () (LaTeX-math-mode t)))
  (setq TeX-PDF-mode t)
#+END_SRC

** Org mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook '(lambda () (visual-line-mode t)))
  (add-hook 'org-mode-hook '(lambda () (org-bullets-mode t)))
#+END_SRC

* Packages

** Git gutter

#+BEGIN_SRC emacs-lisp
  (require 'git-gutter)
  (global-git-gutter-mode t)
  (git-gutter:linum-setup)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (custom-set-variables
;;  '(git-gutter:modified-sign "  ") ;; two space
;;  '(git-gutter:added-sign "++")    ;; multiple character is OK
;;  '(git-gutter:deleted-sign "--"))
#+END_SRC

Set custom background colors.

#+BEGIN_SRC emacs-lisp
(set-face-background 'git-gutter:modified "yellow")
(set-face-foreground 'git-gutter:added "green")
(set-face-foreground 'git-gutter:deleted "red")
#+END_SRC
** Multiple cursors

 #+BEGIN_SRC emacs-lisp
   (require 'multiple-cursors)
   (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
   (global-set-key (kbd "C->") 'mc/mark-next-like-this)
   (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
   (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
 #+END_SRC
** Pretty symbols

#+BEGIN_SRC emacs-lips
  (require 'pretty-symbols)
  (add-hook 'emacs-lisp-mode-hook '(lambda () (pretty-symbols-mode t)))
#+END_SRC
** Powerline

 #+BEGIN_SRC emacs-lisp
   (require 'powerline)
   (powerline-default-theme)
   (setq powerline-default-separator "arrow-fade")
 #+END_SRC
** auto-complete

 #+BEGIN_SRC emacs-lisp
   (require 'auto-complete-config)
   (ac-config-default)
 #+END_SRC

** Paredit

 #+BEGIN_SRC emacs-lisp
   (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
   (add-hook 'emacs-lisp-mode-hook                     #'enable-paredit-mode)
   (add-hook 'eval-expression-minibuffer-setup-hook    #'enable-paredit-mode)
   (add-hook 'ielm-mode-hook                           #'enable-paredit-mode)
   (add-hook 'lisp-mode-hook                           #'enable-paredit-mode)
   (add-hook 'lisp-interaction-mode-hook               #'enable-paredit-mode)
   (add-hook 'scheme-mode-hook                         #'enable-paredit-mode)
   (add-hook 'TeX-mode-hook                            #'enable-paredit-mode)
   (add-hook 'prog-mode-hook                           #'enable-paredit-mode)
   (global-set-key (kbd "{") 'paredit-open-curly)
   (global-set-key (kbd "}") 'paredit-close-curly)
 #+END_SRC

** Rainbow delimiters

 #+BEGIN_SRC emacs-lisp
   (require 'rainbow-delimiters)
   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
 #+END_SRC

** Yasnippet

 #+BEGIN_SRC emacs-lisp
 (require 'yasnippet)
 ;(autoload 'yasnippet "yasnippet" "Select yasnippet" t)
 (require 'yasnippet-snippets)
 ;(autoload 'yasnippet-snippets "yasnippet-snippets" "Select yasnippet snippets" t)
 (yas-reload-all)
 ;;;; Enable languages snippets
 ;(add-hook 'js-mode-hook 'yas-minor-mode)
 ;(add-hook 'java-mode-hook 'yas-minor-mode)
 ;(add-hook 'python-mode-hook 'yas-minor-mode)
 ;(add-hook 'c-mode-hook 'yas-minor-mode)
 ;(add-hook 'c++-mode-hook 'yas-minor-mode)
 ;(add-hook 'latex-mode-hook 'yas-minor-mode)
 (yas-global-mode)
 #+END_SRC

** expand-region

 #+BEGIN_SRC emacs-lisp
 (require 'expand-region)
 (global-set-key (kbd "C-q") 'er/expand-region)
 #+END_SRC

** Magit

 #+BEGIN_SRC emacs-lisp
   (require 'magit)
   (global-set-key (kbd "C-x g") 'magit-status)
 #+END_SRC

** Projectile

 #+BEGIN_SRC emacs-lisp
   (require 'projectile)
   (projectile-global-mode t)
 #+END_SRC

** Helm

 #+BEGIN_SRC emacs-lisp
   (require 'helm-config)
   (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
   (global-set-key (kbd "C-x C-f") 'helm-find-files)
   (global-set-key (kbd "M-x") 'helm-M-x)
   (global-set-key (kbd "C-x b") 'helm-buffers-list)
   (global-set-key (kbd "C-x r b") 'helm-bookmarks)
   (global-set-key (kbd "M-y") 'helm-show-kill-ring)
 #+END_SRC

*** helm-projectile

  #+BEGIN_SRC emacs-lisp
    (require 'helm-projectile)
    (helm-projectile-on)
  #+END_SRC

** which-key

 #+BEGIN_SRC emacs-lisp
   (require 'which-key)
   (which-key-mode)
 #+END_SRC

** ace-window

 #+BEGIN_SRC emacs-lisp
   (require 'ace-window)
   (global-set-key (kbd "M-g M-w") 'ace-window)
   ; Set initial window labels
   ;(setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
   ; Set temporarily background to switch window
   ;(setq aw-background nil)
   ; Ignore current window
   (setq aw-ignore-current t)
 #+END_SRC

** Disabled (for backup)
*** Jedi

#+BEGIN_SRC emacs-lisp
;; ;; jedi
;; (require 'jedi)
;; ;; Hook up to auto-complete
;; (add-to-list 'ac-source 'ac-source-jedi-direct)
;; ;; Enable for python-mode
;; (add-hook 'python-mode-hook 'jedi:setup)
#+END_SRC

*** Company

#+BEGIN_SRC emacs-lisp
;; ;; Company
;; (require 'company)
;; (setq company-idle-delay 0)
;; (setq company-minimum-prefix-length 1)

;; ;; Change default company navigation keys
;; ;; (with-eval-after-load 'company
;; ;;   (define-key company-active-map (kbd "M-n") nil)
;; ;;   (define-key company-active-map (kbd "M-n") nil)
;; ;;   (define-key company-active-map (kbd "C-n") #'company-select-next)
;; ;;   (define-key company-active-map (kbd "C-p") #'company-select-previous)
;; ;;   )

;; (require 'company-irony)
;; (add-to-list 'company-backends 'company-irony)

;; (require 'irony)
;; (add-hook 'c++-mode-hook '(lambda () (irony-mode t)))
;; (add-hook 'c-mode-hook '(lambda () (irony-mode t)))
;; (add-hook 'irony-mode-hook '(lambda () (irony-cdb-autosetup-compile-options t)))

;; (defun my-latex-mode-setup ()
;;   (setq-local company-backends
;;               (append '((company-math-symbols-latex company-math-symbols-unicode))
;;                       company-backends)))

;; (add-hook 'LaTeX-mode-hook '(lambda () (my-latex-mode-setup t)))

;; (with-eval-after-load 'company
;;   (add-hook 'c++-mode-hook 'company-mode)
;;   (add-hook 'c-mode-hook 'company-mode)
;;   (add-hook 'LaTeX-mode-hook 'company-mode)
;;   )
#+END_SRC
*** Helm-swoop

  #+BEGIN_SRC emacs-lisp
  ;; ;;;; Helm Swoop
  ;; (global-set-key (kbd "C-s") 'helm-swoop)
  ;; (global-set-key (kbd "C-r") 'helm-swoop)
  ;; (with-eval-after-load 'helm-swoop
  ;;     (setq helm-swoop-pre-input-function
  ;;         (lambda () nil)))
  ;; ;; C-s or C-r in helm-swoop with empty search field: activate previous search.
  ;; ;; C-s in helm-swoop with non-empty search field: go to next match.
  ;; ;; C-r in helm-swoop with non-empty search field: go to previous match.
  ;; (with-eval-after-load 'helm-swoop
  ;;   (define-key helm-swoop-map (kbd "C-s") 'tl/helm-swoop-C-s))
  ;; (with-eval-after-load 'helm-swoop
  ;;   (define-key helm-swoop-map (kbd "C-r") 'tl/helm-swoop-C-r))

  ;; (defun tl/helm-swoop-C-s ()
  ;;     (interactive)
  ;;     (if (boundp 'helm-swoop-pattern)
  ;;             (if (equal helm-swoop-pattern "")
  ;;                     (previous-history-element 1)
  ;;                 (helm-next-line))
  ;;     (helm-next-line)
  ;;     ))
  ;; (defun tl/helm-swoop-C-r ()
  ;;     (interactive)
  ;;     (if (boundp 'helm-swoop-pattern)
  ;;             (if (equal helm-swoop-pattern "")
  ;;                     (previous-history-element 1)
  ;;                 (helm-previous-line))
  ;;     (helm-previous-line)
  ;;     ))
  #+END_SRC
*** neotree

  #+BEGIN_SRC emacs-lisp
    (require 'neotree)
    (global-set-key (kbd "M-g M-d") 'neotree-show)
    (global-set-key (kbd "M-g M-h") 'neotree-hide)
    (global-set-key (kbd "M-g M-r") 'neotree-dir)
  #+END_SRC
*** perspective
  #+BEGIN_SRC  emacs-lisp
  ;; (require 'perspective)
  #+END_SRC
